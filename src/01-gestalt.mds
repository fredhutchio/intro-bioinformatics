% Introduction to Bioinformatics
% Lesson 1 - Gestalt & remote access


# First things first

Did everyone successfully ssh into `rhino`?

Did everyone get the book?


# Introductions

* Name
* What you're working on
* Technical Experience


# What you'll get from this class

* High level overview of how to _approach_ bioinformatics
* Basic bioinformatics technical and problem solving skills
* Enough momentum to initiate self-learning process


# What you won't get from this class

...but that might be useful:

* Higher level programming
* Statistics
* Other mathematics
* Knowledge of every bioinformatics program/method ever created

But hopefully you'll have enough momentum to learn these on your own as needed.


# Please spend _some_ time outside class

* Time is the only way to learn these things
* Help keep this class moving smoothly


# What is bioinformatics?


# What is bioinformatics?

The application of computation towards the analysis of biological data


# In practice this entails

data munging | data exploration | drawing conclusions


# Data munging

This is where a lot of day to day work goes

* Cleaning data
* Transforming data


# Data exploration

* Visualize
* Build intuition
* Hypothesize


# Building conclusions

In which we shore things up to tell the world...

* Statistical analysis
* More visualization


# Rinse and repeat...

New insights and conclusions lead to new data and questions, etc.


# This should be nothing new

This is not that different a process from how we typically do science!

The main difference is that here we're using computers to carry these steps out that we would normally do at the bench or with a piece of paper.


# So this is _what_ we do

<br/>

## But _how_ should we do it?


# Specific goals for research

General goals for good science:

* Reproducibility
* Robustness
* Accuracy
* Clarity
* Iterability


# Things we can do towards these goals

Immutable data | Documentation | Automation


# Immutability

**Never** change data in place; data in, data out.

Aids: reproducibility, clarity & iterability


# Document **everything**

Hopefully you're already doing this with your biology work (lab notebook).

Bioinformatics should be no different.

* Software versions
* Settings used to run things
* Reasoning behind the way you do things
* How/when you got your data

Aids: reproducibility, clarity


# The best documentation is automation

Write _scripts_ (little computer programs) for everything:

* Munging
* Plotting
* Statistics
* Build scripts (tying it all together)

Aids: reproducibility, iterability


# Guiding principles & practices towards this end

Unix philosophy | project/data organization


# The Unix Philosophy

* Small, **composable** tools that do one thing right
* Plumb tools together into pipelines & scripts
* Embrace plain-text data

Bioinformatics naturally embraces this.


# Project & data layout

Being **consistent** aids in automation & clarity

* naming schemes
* path schemes


# Questions?


# A bit on problem solving

Programmers spend more time sitting around and thinking than they actually do typing code.
What follows are some tips along these lines.


# Polya's How to Solve It

<https://en.wikipedia.org/wiki/How_to_Solve_It>

1. Understand the problem
2. Make a plan
3. Carry out the plan
4. Look back and reflect

When this fails, try to solve an easier or related problem first.


# Understanding

The most important, but hardest part.
It's easy to think you understand a problem better than you do...

* Write out what the problem is
* Try to isolate what makes the problem hard
* Draw/sketch, talk (even out loud to yourself), go for a walk
* If you understood the problem, you'd probably already have a solution, so figure out what you need to understand for the solution to be obvious


# Devising a plan

Devise a game plan.

* Start abstract, and add detail
* If you find yourself getting stuck, go back and try to understand the problem better


# Execution and reflection

If you do a good job understanding and planning, this part should be easy.
If not, look back and figure out how you can improve your understanding and planning.

This progression hopefully feels obvious, but it's easy to jump the gun.


# Strategies at all stages:

* Draw a picture; visualize
* Look for patterns
* Use a model or simpler problem
* List knowns
* Work backwards
* Eliminate possibilities
* Run examples


# Back to Unix...


# What is "Unix"?

Unix is a proprietary operating system from the 60s.

True Unix isn't frequently encountered these days, but its philosophy and approach to computing have thrived in "Unix-like" systems.
So much so that when we say "Unix", we usually mean it in the abstract sense.

We'll be using Ubuntu Linux, a Unix-like operating system.
Mac OsX is also a Unix-like operating system.


# The Unix shell

One of the core aspects of the Unix environment is the _Unix shell_.

The shell is just a wrapper around the operating system, through which we can use text commands and output to interact with our computer.

This is analogous to the desktop environment on your personal computer, which has a graphical rather than a textual user interface.


# Remote servers

Unix was built for remote access.
Computers were big and expensive, so people shared resources.


# Why we care about remote servers

* The Hutch servers are really powerful
* Leave long running computations without worrying about our computer shutting down
* Access running programs and data from any computer
* Distribute tasks across compute clusters, such as the Hutch's [gizmo clusters](http://www.fredhutch.io/events/2015/05/20/spring-2015-unix-hpc/)


# Questions?


# Practicum!

* Connect to a remote server
* Unix survival guide
* Set up a project directory and load it with data
* Investigate our data
* Learn how to edit files on a server
* Tmux for session management


# SSH for remote connection

Do this however you figured out how to do it for your OS.

```
ssh <username>@rhino
```

Write down which rhino you connect to, so you can directly connect to that next time.
(e.g If you get connected to `rhino3`, next time use `ssh <username>@rhino3`.)

Let us know if you get an error message along the lines of "`can't find home`".


# From outside the Hutch

Side note:

If you want to work on the servers from outside the Hutch, you can ssh into `<username>@snail.fhcrc.org`, and then from there execute `ssh <username>@rhino<N>` to get into your rhino.


# You're now in a Unix shell!

We'll cover things more thoroughly next class.
For now, just some basic information for orientation.

What follows is your Zombie Apocalypse Unix guide.


# Brief overview of a Unix command

`command [flags] [operands]`

```
ls -a ~
```

* `ls`: The command, in this case for listing directory contents
* `-a`: A flag which specifies that hidden files should be listed
* `~`: An operand, in this case a special symbol which points to your home directory

Note: Spaces are important here (but not how many).


# Getting help within Unix

* Most Unix programs will take either a `-h`, `--help`, or `-help` flag and return useful information about how to construct a valid command.
* Some commands also have _man pages_, which you can access using `man <command-name>`.
* You can also search for programs using `apropos`

Example: `ls --help` & `man ls` & `apropos calculator`


# Stuck in a terminal?

If you are in the terminal and things seem "stuck" (a program is running that won't stop), try the following:

`Ctrl-c`, `Esc`, `q`, `Ctrl-d`, `Esc : q Enter`

Note: These are _key commands_;

* `-` means press the keys at the same time.
* ` ` (space between) means let go and press the next key


# Autocomplete

Bash can "auto-complete" command and filenames.
Just start typing and hit `Tab`.

Try `ls ~/bioi<Tab>`.


# History

Bash maintains a history of the last several commands you executed.
You can access these by typing `history`.

If you want to run a command similar to one you just executed, you can use the up/down arrow keys to move through the history, edit the line, and re-execute.



# Questions?


# Setting up our project

This class will build around analysis of a [real world dataset](http://dx.doi.org/10.1038/emi.2013.60) of [Simian Foamy Virus](https://en.wikipedia.org/wiki/Simian_foamy_virus) (SFV).
SFV is a retrovirus that typically infects non-human primates (NHP), but can infect humans bitten by NHP (though we're a "dead-end" host).
This data set looks at viruses sampled from humans and monkeys in Bangladesh.


# Project layout

Here's how I typically organize things:

```text
your-project
├── README.md
├── build.sh
├── data
│   ├── sequences.fasta
│   └── metadata.csv
├── scripts
│   ├── clean.py
│   └── plot.R
└── output
    ├── alignment.fasta
    ├── cleaned_metadata.csv
    ├── tree.newick
    └── tree_plot.png
```

Note: this is a little different than the organization from the book; Use what works for you, but be consistent.


# Setting up our project directory

```bash
mkdir ~/bioinfclass

cd ~/bioinfclass
mkdir data output scripts

ls
```

(You'll always enter in the things you see in these black boxes)


# Download data with `wget`

```bash
wget https://goo.gl/8Nk5tZ -O data.tar
ls
```

Note that we now have a `data.tar` file in this directory.
This is an archive type (like `zip`) common on Unix systems.
To unpack it

```bash
tar -v -x -f data.tar
```


# Editing text files with `nano`

Type `nano README.md` to open a new text file called `README.md`

```bash
nano README.md
```

You are now in the `nano` text editing program.
Type your thoughts about the class so far...

To save, type `Ctrl-o` and hit enter.
To exit type `Ctrl-x` (if there are unsaved changes, next type `y` then `Enter` to save them).



# Let's look at what we've done

`tree` prints out a directory tree as ASCII art.

```bash

tree
```

Note: This may not turn out right on Windows PuTTY terminals.


# Let's explore the sequence file

`cat` prints the output of file(s) to the screen.

```bash
cat data/sfv.fasta
```


# Now with `less`

`less` lets us "page" through data, without flooding the screen.

```bash
less data/sfv.fasta
```

<br/>

Press the `q` key to exit from `less`.


# Now let's look at the metadata

```bash
less data/sfv.csv
```

Press the `/` key to enter a search string

(Try `human` or `monkey`; Use `n` and `N` to toggle through results).


# Questions?


# Supercharging our shell

SciComp has set up a _module_ system for customizing your environment.

We'll be using the `intro-bio` module, loaded by executing `module load intro-bio` (note: this *only affects the current shell session!*).
When you do this, you should see something like:

```bash
module load intro-bio
```

You might get a message that says `Using already loaded python`, but don't worry about it.
If you get an error message though, let us know.
You can't proceed without this module loaded.


# Module system side note

**Note:** if you _ever_ get a "command not found" error, you probably need to re-load your modules.


# Tmux - Terminal multiplexer

Tmux let's combine multiple Unix shells into one.

We could open multiple terminal windows to multitask, but each would need its own ssh connection.
Also, without tmux, if our connection dies, so do our programs.
With tmux we can:

* Put down and pick up work from multiple machines
* Keep working on other things while a long running computation runs
* Switch back and forth quickly between multiple projects


# Setting up tmux

We'll use tmux throughout this class to keep sessions running.
But first let's download a nice tmux configuration file for making things easier.

```bash
# This is a command that downloads a tmux configuration file
wget https://raw.githubusercontent.com/fredhutchio/intro-bioinformatics/gh-pages/config/tmux.conf

ls

# tmux knows to look for our config file at ~/.tmux.conf
mv tmux.conf ~/.tmux.conf

# Note that this file is hidden once we make it a "dotfile"
ls ~
ls -a ~
```


# Starting a new tmux session

```bash
tmux
```

You should now see a fresh shell session inside of tmux.


# Quick tmux cheatsheet

* `Ctrl-a` - your "Command key"
* `Ctrl-a ?` - Help
* `Ctrl-a d` - Detach session

Windows:

* `Ctrl-a c` - New window
* `Ctrl-a <Space>` - Next window


# Quick tmux cheatsheet

Panes:

* `Ctrl-a |` - Split window into panes vertically
* `Ctrl-a -` - Split window into panes horizontally
* `Ctrl-a <arrow>` - Move between
* `Ctrl-d` - Close a pane or window


# Tmux commands

You can also interact with tmux using commands, and you can see a list of commands and explanations on the man page:

```
man tmux
```

All of the key combos above are just bindings to these commands, so this is a good place to go if you're trying to figure something out.

You can also type `tmux ` and hit `<Tab>` to see a list of commands (this will autocomplete if you type the first part of the command; try `tmux kill-` then `<Tab>`).


# Lets put Tmux to the test

And also do our first sequence alignment!


# What is a sequence alignment?

As genetic sequences evolve, base pairs can be added or dropped.
Alignment tries to figure out where these insertion/deletion events happened so that individual sites in an alignment can be compared between sequences:

```
AAGGCCTT            AAGGCCTT
ACGGCCTT    ==>>    ACGGCCTT
AAGCCTA             AAG-CCTA
ACGGCCTA            ACGGCCTA
```

Note: the `-` character in the alignment represents a putative deletion.

# Making a sequence alignment

```bash
# First start the long running alignment
cd ~/bioinfclass
muscle -maxiters 2 -in data/sfv.fasta -out output/alignment.fasta

# Get bored waiting and want to work on something else...
<Ctrl-a |> # create new pane

cd ~
mkdir new-project
cd new-project
mkdir data output scripts
```


# Detaching and attaching a tmux session

1. Close your terminal window, and ignore any warning prompts.
2. Reconnect just the way you did at the beginning of the class.
3. Type `tmux attach` to attach to an existing session.

**Remember:** `tmux attach` will fail if you don't have a session open already; if that happens just enter `tmux` to start a new session.


# Manual detach

While in tmux, we can explicitly detach by typing `tmux detach`.

Try doing this and then reattaching.


# Questions?


# Source code!

The source code for these slides is available on GitHub.

https://github.com/fredhutchio/intro-bioinformatics

For the code that generated these slides, look at the `.mds` files in the [`src`](https://github.com/fredhutchio/intro-bioinformatics/tree/gh-pages/src) directory.
(This code is an extension of Markdown, which we'll look at more next week)

To submit issues or questions about the class, go to the [Issues](https://github.com/fredhutchio/intro-bioinformatics/issues) page.


# Exercises

Please, _please_, _**please!**_

Go over `tmux` and `nano` and memorize the basics of how to use them.
We'll use these tools over and over and this will help keep things moving.


# Homework

Recommended reading:

* Chapters 1 & 2 if you haven't already.
* Chapters 2 & 3 for basic Unix stuff & tmux.

Reading for next class:

* Chapter 3, and chapter 7 (till around page 148).


# Resources

* Class home page: <http://fredhutchio.github.io/intro-bioinformatics>
* Polya: How to solve it <https://en.wikipedia.org/wiki/How_to_Solve_It>
* Unix command reference: <https://ubuntudanmark.dk/filer/fwunixref.pdf>
* Tmux tutorial: <http://www.fredhutch.io/articles/2014/04/27/terminal-multiplex>
* Stack overflow: <https://stackoverflow.com>
* More on our data: http://dx.doi.org/10.1038/emi.2013.60

