% Introduction to Bioinformatics
% Lesson 1 - Gestalt & remote access


# First things first

Did everyone successfully ssh into `rhino`?

Did everyone get the book?


# Introductions

* Name
* What you're working on
* Technical Experience


# Our goals for this course

* High level overview of how to _approach_ bioinformatics
* Basic bioinformatics technical and problem solving skills
* Enough momentum to initiate self-learning process


# What you won't get from this course

...that might be useful.

* Higher level programming
* Statistics
* Other mathematics
* Knowledge of every bioinformatics program/method ever created

Our goal is to give you enough momentum to learn what you need as you go.


# Please spend time outside class

This stuff doesn't stick unless you keep doing it.

* Set aside time every week, no matter how long
* Longer is great, but consistency is best
* Frequency is great, but set reachable goals
* Plan to continue long after the course
* Start a project
* Feel free to email Brian - he gets paid for this
* Have fun!


# What is bioinformatics?


# What is bioinformatics?

The application of computation towards the analysis of biological data


# In practice this entails

data munging | data exploration | drawing conclusions


# Data munging

This is where a lot of day to day work goes

* Cleaning data
* Transforming data


# Data exploration

* Visualize
* Build intuition
* Hypothesize


# Building conclusions

In which we shore things up to tell the world...

* Statistical analysis
* More visualization


# Rinse and repeat...

New insights and conclusions lead to new data and questions, etc.


# This should be nothing new

This is the scientific process.

With data and computation at center of process.

Data science.


# So this is _what_ we do

<br/>

## But _how_ should we do it?


# Specific goals for research

* Reproducibility
* Robustness
* Accuracy
* Clarity
* Iterability


# Things we can do towards these goals

Immutable data | Documentation | Automation | Consistency


# Immutability

**Never** change data in place; data in, data out.

Aids: reproducibility, iterability, clarity


# Document **everything**

Hopefully you're already doing this with your biology work.
Bioinformatics should be no different.

* Software versions
* Settings used to run things
* Reasoning behind the way you do things
* How/when you got your data

Aids: reproducibility, clarity


# The best documentation is automation

Write _scripts_ (little computer programs) for everything:

* Munging
* Plotting
* Statistics
* Build scripts (tying it all together)

Aids: reproducibility, iterability


# Consistent project & data layout

Being **consistent** aids in automation & clarity

* naming schemes
* directory (folder) organization

Aids: automation, clarity


# Questions?


# A bit on problem solving

Programmers spend more time sitting around and thinking than they actually do typing code.
What follows are some tips along these lines.


# Polya's How to Solve It

<https://en.wikipedia.org/wiki/How_to_Solve_It>

1. Understand
2. Plan
3. Exectue
4. Reflect

When this fails, try to break down into simpler pieces and iterate (solve an easier or related problem first).


# Understanding

The most important, but hardest part.
It's easy to think you understand a problem better than you do...

* Write out the problem
* Isolate what makes the problem hard
* Draw/sketch, talk (even out loud to yourself), go for a walk, look for patterns
* List knows, work backwards, eliminate possibilities, run examples
* When you truly understood a problem, the solution should appear obvious, so don't stop trying to understand until it is


# Devising a plan

Devise a game plan.

* Start abstract, and add detail
* If you find yourself getting stuck, go back and try to understand the problem better


# Execution and reflection

If you get stuck, spend more time Understanding and Planning.

At the end reflect on the process.
This is meta-learning.


# Questions?


# Unix


# What is "Unix"?

Unix is a proprietary operating system from the 60s.

True Unix is rare these days, but its philosophy and design live on in "Unix-like" systems (including OsX).
When we say "Unix", we usually mean it in this general sense.

We'll be using Ubuntu Linux, a Unix-like operating system.


# The Unix Philosophy

* Small, **composable** tools that do one thing right
* Plumb tools together into pipelines & scripts
* Embrace plain-text data

Bioinformatics naturally embraces this.


# The Unix shell

The _shell_ is a wrapper around the operating system, through which text commands and output are used to interact with the computer.

This is analogous to the desktop environment on your personal computer.


# Remote servers

Unix was built for remote access.
Computers were big and expensive, so people shared resources.

Today, this remains useful:

* The Hutch servers are really powerful
* You can leave long running computations without worrying about unexpected shutdowns
* Access running programs and data from any computer
* Distribute tasks across compute clusters, such as the Hutch's [gizmo clusters](http://www.fredhutch.io/events/2015/05/20/spring-2015-unix-hpc/)


# Questions?


# Practicum!

* Connect to a remote server
* Survival guide
* Set up a project directory and load it with data
* Investigate our data
* Learn how to edit files using an in-shell text editor (vi)
* Tmux for session management


# SSH for remote connection

Do this however you figured out how to do it for your OS.

```
ssh <username>@rhino
```

Write down which rhino you connect to, so you can directly connect to that next time.
(e.g If you get connected to `rhino3`, next time use `ssh <username>@rhino3`.)

Let us know if you get an error message along the lines of "`can't find home`".


# From outside the Hutch

If you want to work on the servers from outside the Hutch, you can ssh into `<username>@snail.fhcrc.org`, and then from there execute `ssh <username>@rhino<N>` to get into your rhino.


# You're now in a Unix shell!

We'll cover things more thoroughly next class.
For now, just some basic information for orientation.

What follows is your Zombie Apocalypse Unix guide.


# Brief overview of a Unix command

`command [flags] [operands]`

```
ls -a ~
```

* `ls`: The command, in this case for listing directory contents
* `-a`: A flag which specifies that hidden files should be listed
* `~`: An operand, in this case a special symbol which points to your home directory

Note: Spaces are important here (but not how many).


# Getting help within Unix

* Most Unix programs will take either a `-h`, `--help`, or `-help` flag and return useful information about how to construct a valid command.
* Some commands also have _man pages_, which you can access using `man <command-name>`.
* You can also search for programs using `apropos`

Example: `ls --help` & `man ls` & `apropos calculator`


# Stuck in a terminal?

If you are in the terminal and things seem "stuck" (a program is running that won't stop), try the following:

`Ctrl-c`, `Esc`, `q`, `Ctrl-d`, `Esc : q Enter`

Note: These are _key commands_;

* `-` means press the keys at the same time.
* ` ` (space between) means let go and press the next key


# Autocomplete

Bash can "auto-complete" command and filenames.
Just start typing and hit `Tab`.

Try `ls ~/bioi<Tab>`.


# History

Bash maintains a history of the last several commands you executed.
You can access these by typing `history`.

If you want to run a command similar to one you just executed, you can use the up/down arrow keys to move through the history, edit the line, and re-execute.



# Questions?


# Setting up our project

This class builds around analysis of a [real world dataset](http://dx.doi.org/10.1038/emi.2013.60) of [Simian Foamy Virus](https://en.wikipedia.org/wiki/Simian_foamy_virus) (SFV).
SFV is a retrovirus that infects non-human primates, but can infect humans bitten by NHP.
Howver, we appear to be a "dead-end" host.

This data set looks at viruses sampled from humans and monkeys in Bangladesh.


# Project layout

Here's how I typically organize things:

```text
your-project
├── README.md
├── build.sh
├── data
│   ├── sequences.fasta
│   └── metadata.csv
├── scripts
│   ├── clean.py
│   └── plot.R
└── output
    ├── alignment.fasta
    ├── cleaned_metadata.csv
    ├── tree.newick
    └── tree_plot.png
```

Note: this is a little different than the organization from the book; Use what works for you, but be consistent.


# Setting up our project directory

```bash
mkdir ~/bioinfclass

cd ~/bioinfclass
mkdir data output scripts

ls
```

(You'll always enter in the things you see in these black boxes)


# Download data with `wget`

```bash
wget https://goo.gl/8Nk5tZ -O data.tar
ls
```

Note that we now have a `data.tar` file in this directory.
This is an archive type (like `zip`) common on Unix systems.
To unpack it

```bash
tar -v -x -f data.tar
```


# Introducing vi and vim

Vi is a wonderful, powerful, but completely arcane editor.
However, it's worth being able to use because:

* even the sparsest linux install will have some variant of vi.
* when working with remote machines, it's nice to be able to edit text in a powerful editor directly on the machine.
* finally, sometimes another program (e.g. git) will plop you into vim without you realizing it, so it's nice to know what to do in this situation.

# Vim is a _modal_ text editor

Vim has two primary modes:

* insert mode: typing will now insert text into the file
* command mode: key strokes become poweful _commands_, and can carry out high-level editing tasks

Fully understanding comamnd mode takes time, but basic usage is quite simple.

# Vim tutorial

##

Create a `README.md` file with vim.

* Invoke with `vim README.md`
* Type `i` to enter *insert mode*
* Type to enter text, move around with arrow keys, edit as needed
* Hit `Esc` to exit insert mode and enter *command mode*
* Type `: w <Enter>` to save
* When you are done editing, type `: q <Enter>`

That wasn't so bad, was it?

(click down for more advanced usage)

## Using the command mode

So far the only real action has been in insert mode.
The other mode in vi is the *command mode*.
In this mode you can quickly navigate and modify your file using key commands.

## Moving around quickly

There are lots of ways to move your cursor around in command mode:

* The arrow keys (and the "_home row_" `hjkl` keys)
* `0` moves to the beginning of the *line*, and `$` moves to the end
* `b` moves back one *word*, and `w` moves forward one
* `{` moves back one *paragraph*, and `}` moves forward one
* `(` moves back one *sentence*, and `)` moves forward one

You can prefix these commands with numbers to move faster, e.g. `3 w` moves you forward three words.

## Cutting and pasting

There is a simple way to cut and paste exactly analogous to a word processor: highlight a block of text, then copy or cut, then paste.

* In command mode, move cursor to where you want to start your highlight
* Press `v`; this places you in _visual_ mode
* Move cursor to the end of your highlighted region
* Press `d` to cut, `y` (for _yank_) to copy
* Move cursor to where you want to paste
* Press `p` to paste

## Combining motions and actions

Motions and actions can be combined. E.g.:

* `d w` cuts one word, and `d 2 w` cuts two words
* `y w` copies one word, and `y 2 w` copies two words

You can also cut/copy entire lines with the shortcuts `d d` and `y y`.

## Undo/redo

If you ever mess anything up (which is easy to do in command mode), `u` is undo and `Ctrl-r` is redo (from command mode).

## Vim resources

* [An online vim tutorial](http://www.openvim.com/)
* The `vimtutor` command, available wherever you find `vim`
* [Ben Crowder's vim tips](http://bencrowder.net/files/vim-fu/)
* [Cheatsheet/poster](https://rumorscity.com/wp-content/uploads/2014/08/10-Best-VIM-Cheat-Sheet-02.jpg)
* [Wallpaper](https://github.com/LevelbossMike/vim_shortcut_wallpaper)

Note that these guides insist that you can't use the arrow keys.
You certainly can, though it's not considered hip (because vim is all about efficiency, and moving your hands from home position to the arrow keys is not efficient.)


# Let's look at what we've done

`tree` prints out a directory tree as ASCII art.

```bash

tree
```

Note: This may not turn out right on Windows PuTTY terminals.


# Let's explore the sequence file

`cat` prints the output of file(s) to the screen.

```bash
cat data/sfv.fasta
```


# Now with `less`

`less` lets us "page" through data, without flooding the screen.

```bash
less data/sfv.fasta
```

<br/>

Press the `q` key to exit from `less`.


# Now let's look at the metadata

```bash
less data/sfv.csv
```

Press the `/` key to enter a search string

(Try `human` or `monkey`; Use `n` and `N` to toggle through results).


# Questions?


# Supercharging our shell

SciComp has set up a _module_ system for customizing your environment.

We'll be using the `intro-bio` module, loaded by executing `module load intro-bio` (note: this *only affects the current shell session!*).
When you do this, you should see something like:

```bash
module load intro-bio
```

You might get a message that says `Using already loaded python`, but don't worry about it.
If you get an error message though, let us know.
You can't proceed without this module loaded.


# Our environment

We can also script our environment via a dotfile that gets loaded when shell sessions are created: `~/.bashrc`.

* Run `vim ~/.bashrc` to open the file
* hit `i` for insert mode
* use arrow keys to scroll to the bottom of the file, then add:

```bash
module load intro-bio
export PATH=~/bin/:$PATH
```

Save and quit (`Esc` then `:wq<Enter>`), then run `source ~/.bashrc` to reload the changes (for each already open tmux pane).


# Module system side note

**Note:** if you _ever_ get a "command not found" error, you probably need to re-load your modules.


# Tmux - Terminal multiplexer

Tmux let's combine multiple Unix shells into one.

We could open multiple terminal windows to multitask, but each would need its own ssh connection.
Also, without tmux, if our connection dies, so do our programs.
With tmux we can:

* Put down and pick up work from multiple machines
* Keep working on other things while a long running computation runs
* Switch back and forth quickly between multiple projects


# Setting up tmux

We'll use tmux throughout this class to keep sessions running.
But first let's download a nice tmux configuration file for making things easier.

```bash
# This is a command that downloads a tmux configuration file
wget https://raw.githubusercontent.com/fredhutchio/intro-bioinformatics/gh-pages/config/tmux.conf

ls

# tmux knows to look for our config file at ~/.tmux.conf
mv tmux.conf ~/.tmux.conf

# Note that this file is hidden once we make it a "dotfile"
ls ~
ls -a ~
```


# Starting a new tmux session

```bash
tmux
```

You should now see a fresh shell session inside of tmux.


# Tmux cheatsheet/tutorial

## Bare bones tmux

* `Ctrl-a` - your "Command key"
* `Ctrl-a c` - New window
* `Ctrl-a <Space>` - Next window
* `Ctrl-a |` - Split window into panes vertically
* `Ctrl-a -` - Split window into panes horizontally
* `Ctrl-a <arrow>` - Move between
* `Ctrl-d` - Close a pane or window

For more tmux tips, click down.

## Moving between panes and moving panes

You can also use `h`, `j`, `k`, and `l` in place of the arrow keys, as in `vim`.

You can also swap/reorder panes using `Ctrl-a J` and `Ctrl-a K`.

## Resizing panes

* `Ctrl-a <` - move vertical split left
* `Ctrl-a >` - move vertical split right
* `Ctrl-a +` - move horizontal split up
* `Ctrl-a +` - move horizontal split down

Note: You can click `Ctrl-a` once, and hold the second key for big moves.

## Naming & finding windows

* `Ctrl-a ,` will let you name a window
* `Ctrl-a '` presents a list of windows (by name)
  * `<arrow>` and `Enter` to switch to a window
* `Ctrl-a <numeric>` switches to a window by number.

## Scrolling and copy/paste in tmux

When a noisy program floods a tmux pane, your mouse wheel won't let you scroll, like in a normal shell session.
Pressing `Ctrl-a [` will place you in scroll mode.
Use can now use arrow keys or `Ctrl-u`/`Ctrl-d` to scroll through the history, and search with `/`.

From this mode, you can also press `Space` to enter copy-mode, `<arrow>` keys to specify a collection, and `Enter` to copy the selection.
To paste the selection, use `Ctrl-]`.


# Tmux commands

You can also interact with tmux using commands, and you can see a list of commands and explanations on the man page:

```
man tmux
```

All of the key combos above are just bindings to these commands, so this is a good place to go if you're trying to figure something out.


# Detaching and attaching a tmux session

1. Close your terminal window, and ignore any warning prompts.
2. Reconnect just the way you did at the beginning of the class.
3. Type `tmux attach` to attach to an existing session.

**Remember:** `tmux attach` will fail if you don't have a session open already; if that happens just enter `tmux` to start a new session.


# Questions?


# Source code!

The source code for these slides is available on GitHub.

<https://github.com/fredhutchio/intro-bioinformatics>

For the code that generated these slides, look at the `.mds` files in the [`src`](https://github.com/fredhutchio/intro-bioinformatics/tree/gh-pages/src) directory.
(This code is an extension of Markdown, which we'll look at more next week)

To submit issues or questions about the class, go to the [Issues](https://github.com/fredhutchio/intro-bioinformatics/issues) page.


# Homework

Please, _please_, _**please!**_

* Go over `tmux` and `vim` and memorize the basics of how to use them
* Set up a routine for practice and tinkering
* Pick a personal project


# Homework

Recommended reading:

* Chapters 1 & 2 if you haven't already.
* Chapters 2 & 3 for basic Unix stuff & tmux.

Reading for next class:

* Chapter 3, and chapter 7 (till around page 148).


# Resources

* Class home page: <http://fredhutchio.github.io/intro-bioinformatics>
* Polya: How to solve it <https://en.wikipedia.org/wiki/How_to_Solve_It>
* Unix command reference: <https://ubuntudanmark.dk/filer/fwunixref.pdf>
* Tmux tutorial: <http://www.fredhutch.io/articles/2014/04/27/terminal-multiplex>
* Stack overflow: <https://stackoverflow.com>
* More on our data: http://dx.doi.org/10.1038/emi.2013.60

